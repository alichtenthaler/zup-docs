{
    "docs": [
        {
            "location": "/", 
            "text": "ZUP \u00e9 uma plataforma open-source que possibilita a coleta, organiza\u00e7\u00e3o, an\u00e1lise e compartilhamento de informa\u00e7\u00f5es sobre\n servi\u00e7os urbanos (limpeza de bueiros, coleta de entulhos, tapa buracos, poda de \u00e1rvores entre outros) e invent\u00e1rios \n p\u00fablicos ou privados diversos. Como sistema, a gest\u00e3o de relatos, invent\u00e1rios e fluxo de trabalho est\u00e3o presentes sem \nassumir um prop\u00f3sito predeterminado, permitindo as que organiza\u00e7\u00f5es que adotem a plataforma consigam ganhar visibilidade \n em diversas \u00e1reas de sua opera\u00e7\u00e3o atrav\u00e9s das configura\u00e7\u00f5es espec\u00edficas que seu neg\u00f3cio necessita.\n\n\nPara facilitar o acesso e disponibilidade o projeto disponibiliza tr\u00eas aplicativos m\u00f3veis com dois prop\u00f3sitos diferentes: \no primeiro, ZUP Cidad\u00e3o, est\u00e1 dispon\u00edvel para as plataformas iOS e Android e permite que usu\u00e1rios cadastrem, acompanhem \ne compartilhem relatos com outros usu\u00e1rios. O segundo aplicativo, ZUP T\u00e9cnico, foi desenvolvido para a plataforma Android\ne permite a gest\u00e3o de relatos e invent\u00e1rios pelo celular ou tablet. Este segundo foi feito com o objetivo de facilitar o\ntrabalho de fiscais e outros profissionais de campos a interagir com o sistema. Suporte a edi\u00e7\u00e3o e cria\u00e7\u00e3o de relatos e\ninvent\u00e1rio offline tamb\u00e9m se encontra dispon\u00edvel.\n\n\n\n\nAl\u00e9m disso, existem tr\u00eas aplica\u00e7\u00f5es web com os seguintes prop\u00f3sito:\n\n\n\n\nLanding page: uma p\u00e1gina que permite cidades que est\u00e3o adotando o ZUP Cidad\u00e3o introduzir o sistema aos usu\u00e1rios \n finais e encaminh\u00e1-los ao sistema mais adequado para sua plataforma.\n\n\nZUP Cidad\u00e3o web: tem o mesmo papel dos aplicativos cidad\u00e3o mobile e permite na intera\u00e7\u00e3o de usu\u00e1rios com o sistema de\n  relatos e invent\u00e1rio do sistema.\n\n\nZUP Painel: interface web administrativa com acesso completo a todos as funcionalidades do sistema. Al\u00e9m de usu\u00e1rios \n administrativos, todos aqueles que participam em alguma etapa na gest\u00e3o de relatos e invent\u00e1rio possuem acesso as \n fun\u00e7\u00f5es garantidas a eles atrav\u00e9s deste aplicativo.\n\n\n\n\nPara conhecer mais sobre os objetivos do produto ou outras iniciativas do Instituto TIM\nvisite a p\u00e1gina do projeto no site do \nInstituto TIM\n. \n\n\nSe voc\u00ea procura informa\u00e7\u00f5es sobre o uso do sistema, entre na \nbase de conhecimento\n.\nO restante do site serve como um manual de instala\u00e7\u00e3o, configura\u00e7\u00e3o e manuten\u00e7\u00e3o da plataforma e \u00e9 destinado a equipes \nde TI e desenvolvedores.", 
            "title": "Introdu\u00e7\u00e3o"
        }, 
        {
            "location": "/implement/", 
            "text": "O ZUP oferece funcionalidades \u00fateis para diversos tipos de institui\u00e7\u00f5es \u2013 p\u00fablicas e privadas \u2013 e, devido a flexibilidade da plataforma, diversos setores dentro destas podem se beneficiar das ferramentas de organiza\u00e7\u00e3o e da visibilidade proporcionada pelo uso delas.\nListamos aqui as etapas m\u00ednimas necess\u00e1rias para se colocar em produ\u00e7\u00e3o o sistema, seja com todas as funcionalidades habilitadas, ou apenas com parte delas.\n\n\nComponentes essenciais\n\n\nIndependente de quais aplicativos forem selecionados para uso pela organiza\u00e7\u00e3o, dois componentes s\u00e3o necess\u00e1rios para operar o sistema: a API e o Painel Administrativo. A API, tamb\u00e9m conhecida como backend, \u00e9 respons\u00e1vel pelo armazenamento e roteamento de informa\u00e7\u00f5es e implementa a l\u00f3gica de neg\u00f3cio dos diferentes m\u00f3dulos do sistema atrav\u00e9s de uma interface exposta via HTTP. Este componente deve rodar em um servidor acess\u00edvel ao Painel Administrativo e a todos os outros aplicativos escolhidos, seja isso na internet p\u00fablica ou na rede privada.\nO Painel Administrativo \u00e9 a principal ferramenta para manipula\u00e7\u00e3o e uso do sistema e possui acesso a todas funcionalidades dispon\u00edveis na plataforma. Se sua organiza\u00e7\u00e3o necessita usar a aplica\u00e7\u00e3o no backoffice atrav\u00e9s de notebooks ou desktops, a instala\u00e7\u00e3o e configura\u00e7\u00e3o destes dois componentes \u00e9 tudo que voc\u00ea precisa.\n\n\n\n\nRealize a instala\u00e7\u00e3o e configura\u00e7\u00e3o da plataforma com o guia neste site\n.\n\n\nEntenda e configure grupos de usu\u00e1rios e permiss\u00f5es com a documenta\u00e7\u00e3o da base de conhecimento\n.\n\n\nCrie \ncategorias de relato\n e \ncategorias de invent\u00e1rio\n.\n\n\nConhe\u00e7a as outras funcionalidades que o sistema oferece e que pode ser \u00fatil na sua organiza\u00e7\u00e3o\n.\n\n\n\n\nUso em campo\n\n\nO ZUP T\u00e9cnico permite agentes em campo interagir com o sistema de forma quase t\u00e3o abrangente quanto o Painel Administrativo. Funcionalidades que tratem de cria\u00e7\u00e3o e configura\u00e7\u00e3o de categorias de invent\u00e1rios, relatos, visualiza\u00e7\u00e3o de relat\u00f3rios e outras ferramentas administrativas n\u00e3o est\u00e3o dispon\u00edveis no aplicativo. Entretanto a cria\u00e7\u00e3o, edi\u00e7\u00e3o e consumo de itens j\u00e1 configurados no sistema pode ser utilizada, at\u00e9 sem conex\u00e3o com a internet (no caso de relatos e itens de invent\u00e1rio) \u2013\u00a0o que torna o aplicativo ideal para uso em fiscaliza\u00e7\u00e3o,  vistoria e outras formas de trabalho em campo.\n\n\n\n\nBaixe, configure e distribua a aplica\u00e7\u00e3o t\u00e9cnica seguindo as instru\u00e7\u00f5es no reposit\u00f3rio do componente.\n\n\n\n\nUsu\u00e1rios externos e aplicativos m\u00f3veis\n\n\nFinalmente, o sistema tamb\u00e9m conta com aplicativos m\u00f3veis destinados a permitir o consumo de informa\u00e7\u00f5es sobre itens de invent\u00e1rio, a gest\u00e3o de relatos pessoais e ao consumo de informa\u00e7\u00f5es p\u00fablicas sobre relatos de terceiros para usu\u00e1rios que podem ou n\u00e3o pertencer a organiza\u00e7\u00e3o.  Estes aplicativos foram feitos para smartphones e tem como p\u00fablico alvo principal atores que far\u00e3o uso casual do sistema.\n\n\n\n\nBaixe, configure e distribua a aplica\u00e7\u00e3o iOS seguindo as instru\u00e7\u00f5es no reposit\u00f3rio do componente.\n\n\nBaixe, configure e distribua a aplica\u00e7\u00e3o Android seguindo as instru\u00e7\u00f5es no reposit\u00f3rio do componente.", 
            "title": "Como adotar a plataforma"
        }, 
        {
            "location": "/implement/#componentes-essenciais", 
            "text": "Independente de quais aplicativos forem selecionados para uso pela organiza\u00e7\u00e3o, dois componentes s\u00e3o necess\u00e1rios para operar o sistema: a API e o Painel Administrativo. A API, tamb\u00e9m conhecida como backend, \u00e9 respons\u00e1vel pelo armazenamento e roteamento de informa\u00e7\u00f5es e implementa a l\u00f3gica de neg\u00f3cio dos diferentes m\u00f3dulos do sistema atrav\u00e9s de uma interface exposta via HTTP. Este componente deve rodar em um servidor acess\u00edvel ao Painel Administrativo e a todos os outros aplicativos escolhidos, seja isso na internet p\u00fablica ou na rede privada.\nO Painel Administrativo \u00e9 a principal ferramenta para manipula\u00e7\u00e3o e uso do sistema e possui acesso a todas funcionalidades dispon\u00edveis na plataforma. Se sua organiza\u00e7\u00e3o necessita usar a aplica\u00e7\u00e3o no backoffice atrav\u00e9s de notebooks ou desktops, a instala\u00e7\u00e3o e configura\u00e7\u00e3o destes dois componentes \u00e9 tudo que voc\u00ea precisa.   Realize a instala\u00e7\u00e3o e configura\u00e7\u00e3o da plataforma com o guia neste site .  Entenda e configure grupos de usu\u00e1rios e permiss\u00f5es com a documenta\u00e7\u00e3o da base de conhecimento .  Crie  categorias de relato  e  categorias de invent\u00e1rio .  Conhe\u00e7a as outras funcionalidades que o sistema oferece e que pode ser \u00fatil na sua organiza\u00e7\u00e3o .", 
            "title": "Componentes essenciais"
        }, 
        {
            "location": "/implement/#uso-em-campo", 
            "text": "O ZUP T\u00e9cnico permite agentes em campo interagir com o sistema de forma quase t\u00e3o abrangente quanto o Painel Administrativo. Funcionalidades que tratem de cria\u00e7\u00e3o e configura\u00e7\u00e3o de categorias de invent\u00e1rios, relatos, visualiza\u00e7\u00e3o de relat\u00f3rios e outras ferramentas administrativas n\u00e3o est\u00e3o dispon\u00edveis no aplicativo. Entretanto a cria\u00e7\u00e3o, edi\u00e7\u00e3o e consumo de itens j\u00e1 configurados no sistema pode ser utilizada, at\u00e9 sem conex\u00e3o com a internet (no caso de relatos e itens de invent\u00e1rio) \u2013\u00a0o que torna o aplicativo ideal para uso em fiscaliza\u00e7\u00e3o,  vistoria e outras formas de trabalho em campo.   Baixe, configure e distribua a aplica\u00e7\u00e3o t\u00e9cnica seguindo as instru\u00e7\u00f5es no reposit\u00f3rio do componente.", 
            "title": "Uso em campo"
        }, 
        {
            "location": "/implement/#usuarios-externos-e-aplicativos-moveis", 
            "text": "Finalmente, o sistema tamb\u00e9m conta com aplicativos m\u00f3veis destinados a permitir o consumo de informa\u00e7\u00f5es sobre itens de invent\u00e1rio, a gest\u00e3o de relatos pessoais e ao consumo de informa\u00e7\u00f5es p\u00fablicas sobre relatos de terceiros para usu\u00e1rios que podem ou n\u00e3o pertencer a organiza\u00e7\u00e3o.  Estes aplicativos foram feitos para smartphones e tem como p\u00fablico alvo principal atores que far\u00e3o uso casual do sistema.   Baixe, configure e distribua a aplica\u00e7\u00e3o iOS seguindo as instru\u00e7\u00f5es no reposit\u00f3rio do componente.  Baixe, configure e distribua a aplica\u00e7\u00e3o Android seguindo as instru\u00e7\u00f5es no reposit\u00f3rio do componente.", 
            "title": "Usu\u00e1rios externos e aplicativos m\u00f3veis"
        }, 
        {
            "location": "/installation_docker/", 
            "text": "Instala\u00e7\u00e3o\n\n\nA distribui\u00e7\u00e3o das aplica\u00e7\u00f5es em forma j\u00e1 compilada para uso \u00e9 feita atrav\u00e9s do Docker.\n\nDocker\n \u00e9 uma tecnologia para distribui\u00e7\u00e3o e execu\u00e7\u00e3o de aplica\u00e7\u00f5es virtualizadas a n\u00edvel de \nsistema operacional. A maneira mais simples e eficaz de se manter uma instala\u00e7\u00e3o do ZUP \u00e9 utilizando as imagens dos \ncomponentes que disponibilizamos no Docker Hub. Este documento descreve as etapas para instalar e executar os \ncomponentes b\u00e1sicos para rodar a API e as aplica\u00e7\u00f5es web do ZUP no sistema operacional Ubuntu 14.04 64 bits. Entretanto\nqualquer sistema operacional que suporte Docker deve funcionar com os passos abaixo, salvo que voc\u00ea precisar\u00e1 utilizar o\ngerenciador de pacotes do seu sistema operacional ao inv\u00e9s do \napt\n e talvez tenha que desabilitar o SELinux, caso \nvenha habilitado por padr\u00e3o na sua distribui\u00e7\u00e3o. Al\u00e9m disso, utilizamos o \nSupervisord\n para gerenciar\na execu\u00e7\u00e3o dos containers da aplica\u00e7\u00e3o, incluindo a inicializa\u00e7\u00e3o dos containers junto com o sistema e a reinicializa\u00e7\u00e3o\ndos mesmos em caso de erros.\n\n\nAs necessidades de recursos de hardware depende da volumetria esperada pelo projeto, entretanto no m\u00ednimo recomendamos \n6GB de RAM e dois n\u00facleos de processamento dedicados.\n\n\nPr\u00e9-requisito: Docker\n\n\nO sistema de instala\u00e7\u00e3o do Docker via Ubuntu requer a execu\u00e7\u00e3o de um \u00fanico script de instala\u00e7\u00e3o:\n\n\nwget -qO- https://get.docker.com/ | sh\n\n\n\n\nVoc\u00ea receber\u00e1 um erro caso seu sistema n\u00e3o possua o \nwget\n instalado. Neste caso basta executar:\n\n\nsudo apt-get update\nsudo apt-get install wget\nwget -qO- https://get.docker.com/ | sh\n\n\n\n\nAp\u00f3s a instala\u00e7\u00e3o, caso voc\u00ea n\u00e3o rode os comandos abaixo como root, recomendamos que adicione o usu\u00e1rio no grupo do \nDocker para rodar os comandos sem necessidade do sudo. Recomendamos que voc\u00ea leia as condire\u00e7\u00f5es de seguran\u00e7a do Docker\nem ambos os casos: \nhttps://docs.docker.com/articles/security/\n.\n\n\nsudo gpasswd -a ${USER} docker\n\n\n\n\nPr\u00e9-requisito: Supervisord\n\n\nO supervisord \u00e9 distribuido atrav\u00e9s do PyPI e pode ser instalado atrav\u00e9s do \neasy_install\n.\n\n\nsudo apt-get install python-setuptools\nsudo easy_install supervisor\n\n\n\n\nCrie os diret\u00f3rios para manter os dados do sistema\n\n\nPara persistir informa\u00e7\u00f5es em containers Docker \u00e9 necess\u00e1rio criar diret\u00f3rios (\nvolume\n no jarg\u00e3o Docker) para manter \nos dados no sistema de arquivos do host (o sistema que hospeda o servi\u00e7o do Docker). Para fins desta documenta\u00e7\u00e3o \nmanteremos todos os diret\u00f3rios de dados, configura\u00e7\u00f5es e logs na pasta \n/opt/zup\n. Voc\u00ea pode alterar a localiza\u00e7\u00e3o de \ncada pasta para a hierarquia mais apropriada a sua organiza\u00e7\u00e3o.\n\n\nsudo mkdir -p \\\n    /opt/zup/config \\\n    /opt/zup/postgres-data \\\n    /opt/zup/uploads \\\n    /opt/zup/shared_images \\\n    /opt/zup/logs/api \\\n    /opt/zup/logs/nginx\n\n\n\n\nCrie os arquivos de configura\u00e7\u00e3o\n\n\nDurante a inicializa\u00e7\u00e3o a API l\u00ea uma s\u00e9rie de vari\u00e1veis de configura\u00e7\u00e3o do ambiente. Para passar essas configura\u00e7\u00f5es via\nDocker basta criar um arquivo contendo uma s\u00e9rie de chave-valores. \nVeja a se\u00e7\u00e3o \nConfigura\u00e7\u00e3o da API\n para conhecer as configura\u00e7\u00f5es dispon\u00edveis.\n\n\nA vers\u00e3o da plataforma \u00e9 controlada pelo arquivo \n/opt/zup/config/version\n e deve possuir apenas uma linha de c\u00f3digo:\n\n\n1.0.0\n\n\n\n\nAs seguintes op\u00e7\u00f5es s\u00e3o obrigat\u00f3rias. Para fins deste documento o arquivo de configura\u00e7\u00e3o da API estar\u00e1 localizado \nem \n/opt/zup/config/api.env\n:\n\n\nWEB_URL=https://www.meuzup.com.br\nAPI_URL=http://api.meuzup.com.br:8282\nASSET_HOST_URL=https://api.meuzup.com.br\nSMTP_ADDRESS=smtp.meuservidordeemail.com\nSMTP_PORT=587\nSMTP_USER=zup@meuservidordeemail.com\nSMTP_PASS=102030\nSMTP_TTLS=true\nSMTP_AUTH=plain\nMAIL_HEADER_IMAGE=/usr/src/app/public/shared_images/header.jpg\nREDIS_URL=redis://redis:6379\nDATABASE_URL=postgis://db_user:db_pass@postgres:5432/zup_db\n\n\n\nAl\u00e9m disso \u00e9 necess\u00e1rio informar as configura\u00e7\u00f5es para inicializa\u00e7\u00e3o do banco de dados. \n/opt/zup/config/postgres.env\n:\n\n\nPOSTGRES_USER=db_user\nPOSTGRES_PASSWORD=db_pass\nPOSTGRES_DB=zup_db\n\n\n\nLembre-se de alterar o \napi.env\n quando alterar o \npostgres.env\n.\n\n\nFinalmente, \u00e9 preciso configurar informa\u00e7\u00f5es sobre como conectar na API e qual posicionamento deve ser usado no mapa \npara as aplica\u00e7\u00f5es web. \n/opt/zup/config/web.env\n:\n\n\nAPI_URL=http://api.meuzup.com.br:8282\nMAP_LAT=-23.689701\nMAP_LNG=-46.564874\nMAP_ZOOM=11\nDISABLE_LANDING_PAGE=true\nDISABLE_WEB_APP=true\n\n\n\nCom esta configura\u00e7\u00e3o inicial, apenas o Painel Administrativo estar\u00e1 dispon\u00edvel. Para conhecer todas as op\u00e7\u00f5es de\nconfigura\u00e7\u00e3o, visite a se\u00e7\u00e3o \nConfigura\u00e7\u00e3o dos aplicativos Web\n.\n\n\nBaixe as imagens da aplica\u00e7\u00e3o\n\n\ndocker pull ntxcode/postgresql:9.4\ndocker pull institutotim/zup-api:$(cat /opt/zup/config/version)\ndocker pull institutotim/zup-web:$(cat /opt/zup/config/version)\ndocker pull redis:2.8\n\n\n\n\nCrie o arquivo de configura\u00e7\u00e3o do Supervisord\n\n\nO Supervisord ser\u00e1 usado para controlar o ciclo de vida da aplica\u00e7\u00e3o. Este arquivo de configura\u00e7\u00e3o deve ser salvo \nem \n/etc/supervisord.conf\n.\n\n\n[unix_http_server]\nfile=/tmp/supervisor.sock\n\n[supervisord]\nlogfile=/tmp/supervisord.log\nlogfile_maxbytes=50MB\nlogfile_backups=10\nloglevel=info\npidfile=/tmp/supervisord.pid\nminfds=1024\nminprocs=200\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[program:redis]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c \ndocker rm -f redis || true \n docker run --rm --name=redis -a stdout -a stderr redis:2.8\n\npriority=0\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/redis.log\n\n[program:postgres]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c \ndocker rm -f postgres || true \n docker run --rm -a stdout -a stderr \\\n                        --env-file=/opt/zup/config/postgres.env \\\n                        -v /opt/zup/postgres-data:/var/lib/postgresql/data \\\n                        -v /etc/localtime:/etc/localtime:ro \\\n                        --name postgres ntxcode/postgresql:9.4\n\npriority=1\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/postgres.log\n\n[program:zup-web]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c \ndocker rm -f zup-web || true \n docker run --name zup-web --rm -a stdout -a stderr \\\n                        --env-file=/opt/zup/config/web.env \\\n                        -v /etc/localtime:/etc/localtime:ro \\\n                        -v /opt/zup/logs/nginx:/var/log/nginx \\\n                        -p 80:80 institutotim/zup-web:$(cat /opt/zup/config/version)\n\npriority=2\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/web.log\n\n[program:zup-api]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c \ndocker rm -f zup-api || true \n docker run --rm --link postgres:postgres --link redis:redis \\\n                        --env-file=/opt/zup/config/api.env \\\n                        -v /etc/localtime:/etc/localtime:ro \\\n                        -v /opt/zup/uploads:/usr/src/app/public/uploads \\\n                        -v /opt/zup/logs/api:/usr/src/app/log \\\n                        -v /opt/zup/config:/usr/src/app/config/permissions \\\n                        -v /opt/zup/shared_images:/usr/src/app/public/shared_images \\\n                        -p 8282:80 --name zup-api institutotim/zup-api:$(cat /opt/zup/config/version)\n\npriority=3\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/api.log\n\n\n\n\nConfigure o Supervisord para iniciar automaticamente no boot\n\n\nPara que o supervisord possa iniciar automaticamente as aplica\u00e7\u00f5es ao se iniciar o sistema, \u00e9 necess\u00e1rio criar um \narquivo de configura\u00e7\u00e3o para inicializ\u00e1-lo durante o boot. Adicione o seguinte conte\u00fado em \n/etc/init/supervisor.conf\n:\n\n\ndescription \nsupervisor\n\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nexec /usr/local/bin/supervisord --nodaemon --configuration /etc/supervisord.conf\n\n\n\n\nInicialize o banco de dados\n\n\nPara criar a estrutura da aplica\u00e7\u00e3o no banco de dados, basta executar o comando a baixo:\n\n\ndocker run -it \\\n       --link redis:redis --link postgres:postgres \\\n       --env-file=/opt/zup/config/api.env \\\n       institutotim/zup-api bundle exec rake db:schema:load db:seed\n\n\n\n\nAs credenciais de uma conta de administrador ser\u00e1 exibida na sa\u00edda do comando.\n\n\nInicie o supervisor\n\n\nservice supervisor start\n\n\nInicie a aplica\u00e7\u00e3o\n\n\nsupervisorctl start all\n\n\nPor padr\u00e3o a aplica\u00e7\u00e3o web estar\u00e1 dispon\u00edvel na porta 80 e a API na porta 8282.\n\n\n(Opcional) Importe um banco de dados j\u00e1 existente\n\n\nCaso voc\u00ea esteja atualizando uma instala\u00e7\u00e3o j\u00e1 existente, \u00e9 poss\u00edvel importar um dump do banco de dados da sua aplica\u00e7\u00e3o \ncom seguinte comando:\n\n\ndocker run -it -v /tmp/folder-containing-sql-file:/tmp --link postgres:postgres ntxcode/postgresql /bin/bash -c \npsql --host postgres -U zup -f /tmp/file.sql zup", 
            "title": "Instala\u00e7\u00e3o"
        }, 
        {
            "location": "/installation_docker/#instalacao", 
            "text": "A distribui\u00e7\u00e3o das aplica\u00e7\u00f5es em forma j\u00e1 compilada para uso \u00e9 feita atrav\u00e9s do Docker. Docker  \u00e9 uma tecnologia para distribui\u00e7\u00e3o e execu\u00e7\u00e3o de aplica\u00e7\u00f5es virtualizadas a n\u00edvel de \nsistema operacional. A maneira mais simples e eficaz de se manter uma instala\u00e7\u00e3o do ZUP \u00e9 utilizando as imagens dos \ncomponentes que disponibilizamos no Docker Hub. Este documento descreve as etapas para instalar e executar os \ncomponentes b\u00e1sicos para rodar a API e as aplica\u00e7\u00f5es web do ZUP no sistema operacional Ubuntu 14.04 64 bits. Entretanto\nqualquer sistema operacional que suporte Docker deve funcionar com os passos abaixo, salvo que voc\u00ea precisar\u00e1 utilizar o\ngerenciador de pacotes do seu sistema operacional ao inv\u00e9s do  apt  e talvez tenha que desabilitar o SELinux, caso \nvenha habilitado por padr\u00e3o na sua distribui\u00e7\u00e3o. Al\u00e9m disso, utilizamos o  Supervisord  para gerenciar\na execu\u00e7\u00e3o dos containers da aplica\u00e7\u00e3o, incluindo a inicializa\u00e7\u00e3o dos containers junto com o sistema e a reinicializa\u00e7\u00e3o\ndos mesmos em caso de erros.  As necessidades de recursos de hardware depende da volumetria esperada pelo projeto, entretanto no m\u00ednimo recomendamos \n6GB de RAM e dois n\u00facleos de processamento dedicados.", 
            "title": "Instala\u00e7\u00e3o"
        }, 
        {
            "location": "/installation_docker/#pre-requisito-docker", 
            "text": "O sistema de instala\u00e7\u00e3o do Docker via Ubuntu requer a execu\u00e7\u00e3o de um \u00fanico script de instala\u00e7\u00e3o:  wget -qO- https://get.docker.com/ | sh  Voc\u00ea receber\u00e1 um erro caso seu sistema n\u00e3o possua o  wget  instalado. Neste caso basta executar:  sudo apt-get update\nsudo apt-get install wget\nwget -qO- https://get.docker.com/ | sh  Ap\u00f3s a instala\u00e7\u00e3o, caso voc\u00ea n\u00e3o rode os comandos abaixo como root, recomendamos que adicione o usu\u00e1rio no grupo do \nDocker para rodar os comandos sem necessidade do sudo. Recomendamos que voc\u00ea leia as condire\u00e7\u00f5es de seguran\u00e7a do Docker\nem ambos os casos:  https://docs.docker.com/articles/security/ .  sudo gpasswd -a ${USER} docker", 
            "title": "Pr\u00e9-requisito: Docker"
        }, 
        {
            "location": "/installation_docker/#pre-requisito-supervisord", 
            "text": "O supervisord \u00e9 distribuido atrav\u00e9s do PyPI e pode ser instalado atrav\u00e9s do  easy_install .  sudo apt-get install python-setuptools\nsudo easy_install supervisor", 
            "title": "Pr\u00e9-requisito: Supervisord"
        }, 
        {
            "location": "/installation_docker/#crie-os-diretorios-para-manter-os-dados-do-sistema", 
            "text": "Para persistir informa\u00e7\u00f5es em containers Docker \u00e9 necess\u00e1rio criar diret\u00f3rios ( volume  no jarg\u00e3o Docker) para manter \nos dados no sistema de arquivos do host (o sistema que hospeda o servi\u00e7o do Docker). Para fins desta documenta\u00e7\u00e3o \nmanteremos todos os diret\u00f3rios de dados, configura\u00e7\u00f5es e logs na pasta  /opt/zup . Voc\u00ea pode alterar a localiza\u00e7\u00e3o de \ncada pasta para a hierarquia mais apropriada a sua organiza\u00e7\u00e3o.  sudo mkdir -p \\\n    /opt/zup/config \\\n    /opt/zup/postgres-data \\\n    /opt/zup/uploads \\\n    /opt/zup/shared_images \\\n    /opt/zup/logs/api \\\n    /opt/zup/logs/nginx", 
            "title": "Crie os diret\u00f3rios para manter os dados do sistema"
        }, 
        {
            "location": "/installation_docker/#crie-os-arquivos-de-configuracao", 
            "text": "Durante a inicializa\u00e7\u00e3o a API l\u00ea uma s\u00e9rie de vari\u00e1veis de configura\u00e7\u00e3o do ambiente. Para passar essas configura\u00e7\u00f5es via\nDocker basta criar um arquivo contendo uma s\u00e9rie de chave-valores. \nVeja a se\u00e7\u00e3o  Configura\u00e7\u00e3o da API  para conhecer as configura\u00e7\u00f5es dispon\u00edveis.  A vers\u00e3o da plataforma \u00e9 controlada pelo arquivo  /opt/zup/config/version  e deve possuir apenas uma linha de c\u00f3digo:  1.0.0  As seguintes op\u00e7\u00f5es s\u00e3o obrigat\u00f3rias. Para fins deste documento o arquivo de configura\u00e7\u00e3o da API estar\u00e1 localizado \nem  /opt/zup/config/api.env :  WEB_URL=https://www.meuzup.com.br\nAPI_URL=http://api.meuzup.com.br:8282\nASSET_HOST_URL=https://api.meuzup.com.br\nSMTP_ADDRESS=smtp.meuservidordeemail.com\nSMTP_PORT=587\nSMTP_USER=zup@meuservidordeemail.com\nSMTP_PASS=102030\nSMTP_TTLS=true\nSMTP_AUTH=plain\nMAIL_HEADER_IMAGE=/usr/src/app/public/shared_images/header.jpg\nREDIS_URL=redis://redis:6379\nDATABASE_URL=postgis://db_user:db_pass@postgres:5432/zup_db  Al\u00e9m disso \u00e9 necess\u00e1rio informar as configura\u00e7\u00f5es para inicializa\u00e7\u00e3o do banco de dados.  /opt/zup/config/postgres.env :  POSTGRES_USER=db_user\nPOSTGRES_PASSWORD=db_pass\nPOSTGRES_DB=zup_db  Lembre-se de alterar o  api.env  quando alterar o  postgres.env .  Finalmente, \u00e9 preciso configurar informa\u00e7\u00f5es sobre como conectar na API e qual posicionamento deve ser usado no mapa \npara as aplica\u00e7\u00f5es web.  /opt/zup/config/web.env :  API_URL=http://api.meuzup.com.br:8282\nMAP_LAT=-23.689701\nMAP_LNG=-46.564874\nMAP_ZOOM=11\nDISABLE_LANDING_PAGE=true\nDISABLE_WEB_APP=true  Com esta configura\u00e7\u00e3o inicial, apenas o Painel Administrativo estar\u00e1 dispon\u00edvel. Para conhecer todas as op\u00e7\u00f5es de\nconfigura\u00e7\u00e3o, visite a se\u00e7\u00e3o  Configura\u00e7\u00e3o dos aplicativos Web .", 
            "title": "Crie os arquivos de configura\u00e7\u00e3o"
        }, 
        {
            "location": "/installation_docker/#baixe-as-imagens-da-aplicacao", 
            "text": "docker pull ntxcode/postgresql:9.4\ndocker pull institutotim/zup-api:$(cat /opt/zup/config/version)\ndocker pull institutotim/zup-web:$(cat /opt/zup/config/version)\ndocker pull redis:2.8", 
            "title": "Baixe as imagens da aplica\u00e7\u00e3o"
        }, 
        {
            "location": "/installation_docker/#crie-o-arquivo-de-configuracao-do-supervisord", 
            "text": "O Supervisord ser\u00e1 usado para controlar o ciclo de vida da aplica\u00e7\u00e3o. Este arquivo de configura\u00e7\u00e3o deve ser salvo \nem  /etc/supervisord.conf .  [unix_http_server]\nfile=/tmp/supervisor.sock\n\n[supervisord]\nlogfile=/tmp/supervisord.log\nlogfile_maxbytes=50MB\nlogfile_backups=10\nloglevel=info\npidfile=/tmp/supervisord.pid\nminfds=1024\nminprocs=200\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[program:redis]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c  docker rm -f redis || true   docker run --rm --name=redis -a stdout -a stderr redis:2.8 \npriority=0\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/redis.log\n\n[program:postgres]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c  docker rm -f postgres || true   docker run --rm -a stdout -a stderr \\\n                        --env-file=/opt/zup/config/postgres.env \\\n                        -v /opt/zup/postgres-data:/var/lib/postgresql/data \\\n                        -v /etc/localtime:/etc/localtime:ro \\\n                        --name postgres ntxcode/postgresql:9.4 \npriority=1\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/postgres.log\n\n[program:zup-web]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c  docker rm -f zup-web || true   docker run --name zup-web --rm -a stdout -a stderr \\\n                        --env-file=/opt/zup/config/web.env \\\n                        -v /etc/localtime:/etc/localtime:ro \\\n                        -v /opt/zup/logs/nginx:/var/log/nginx \\\n                        -p 80:80 institutotim/zup-web:$(cat /opt/zup/config/version) \npriority=2\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/web.log\n\n[program:zup-api]\nautostart=true\nautorestart=true\nstartsecs=15\ncommand=/bin/bash -c  docker rm -f zup-api || true   docker run --rm --link postgres:postgres --link redis:redis \\\n                        --env-file=/opt/zup/config/api.env \\\n                        -v /etc/localtime:/etc/localtime:ro \\\n                        -v /opt/zup/uploads:/usr/src/app/public/uploads \\\n                        -v /opt/zup/logs/api:/usr/src/app/log \\\n                        -v /opt/zup/config:/usr/src/app/config/permissions \\\n                        -v /opt/zup/shared_images:/usr/src/app/public/shared_images \\\n                        -p 8282:80 --name zup-api institutotim/zup-api:$(cat /opt/zup/config/version) \npriority=3\nredirect_stderr=true\nstdout_logfile=/opt/zup/logs/api.log", 
            "title": "Crie o arquivo de configura\u00e7\u00e3o do Supervisord"
        }, 
        {
            "location": "/installation_docker/#configure-o-supervisord-para-iniciar-automaticamente-no-boot", 
            "text": "Para que o supervisord possa iniciar automaticamente as aplica\u00e7\u00f5es ao se iniciar o sistema, \u00e9 necess\u00e1rio criar um \narquivo de configura\u00e7\u00e3o para inicializ\u00e1-lo durante o boot. Adicione o seguinte conte\u00fado em  /etc/init/supervisor.conf :  description  supervisor \n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nexec /usr/local/bin/supervisord --nodaemon --configuration /etc/supervisord.conf", 
            "title": "Configure o Supervisord para iniciar automaticamente no boot"
        }, 
        {
            "location": "/installation_docker/#inicialize-o-banco-de-dados", 
            "text": "Para criar a estrutura da aplica\u00e7\u00e3o no banco de dados, basta executar o comando a baixo:  docker run -it \\\n       --link redis:redis --link postgres:postgres \\\n       --env-file=/opt/zup/config/api.env \\\n       institutotim/zup-api bundle exec rake db:schema:load db:seed  As credenciais de uma conta de administrador ser\u00e1 exibida na sa\u00edda do comando.", 
            "title": "Inicialize o banco de dados"
        }, 
        {
            "location": "/installation_docker/#inicie-o-supervisor", 
            "text": "service supervisor start", 
            "title": "Inicie o supervisor"
        }, 
        {
            "location": "/installation_docker/#inicie-a-aplicacao", 
            "text": "supervisorctl start all  Por padr\u00e3o a aplica\u00e7\u00e3o web estar\u00e1 dispon\u00edvel na porta 80 e a API na porta 8282.", 
            "title": "Inicie a aplica\u00e7\u00e3o"
        }, 
        {
            "location": "/installation_docker/#opcional-importe-um-banco-de-dados-ja-existente", 
            "text": "Caso voc\u00ea esteja atualizando uma instala\u00e7\u00e3o j\u00e1 existente, \u00e9 poss\u00edvel importar um dump do banco de dados da sua aplica\u00e7\u00e3o \ncom seguinte comando:  docker run -it -v /tmp/folder-containing-sql-file:/tmp --link postgres:postgres ntxcode/postgresql /bin/bash -c  psql --host postgres -U zup -f /tmp/file.sql zup", 
            "title": "(Opcional) Importe um banco de dados j\u00e1 existente"
        }, 
        {
            "location": "/updating_docker/", 
            "text": "Atualiza\u00e7\u00e3o dos componentes via Docker\n\n\nAtualmente o instala\u00e7\u00e3o do ZUP nos servidores \u00e9 composta de dois componentes (\nzup-api\n e \nzup-web\n) e dois softwares \nauxiliar, \nPostgreSQL\n e \nredis\n, usados como SGDB e cache em mem\u00f3ria respectivamente.\nEstes componentes se traduzem em 4 imagens p\u00fablicas hospedadas no Docker Hub sob os IDs \ninstitutotim/zup-api\n, \n\ninstitutotim/zup-web\n, \nntxcode/postgresql\n e \nredis\n. As imagens do \npostgresql\n e do \nredis\n possuem baixa frequencia\nde atualiza\u00e7\u00e3o, visto que elas s\u00f3 ocorrem em caso de atualiza\u00e7\u00f5es de seguran\u00e7a ou quando uma nova funcionalidade \u00e9 \nrequerida destes componentes. J\u00e1 as imagens da API e dos frontends (web) normalmente s\u00e3o atualizadas em conjunto. \nEsta p\u00e1gina detalha as opera\u00e7\u00f5es necess\u00e1rias para realizar as atualiza\u00e7\u00f5es destes componentes. Estes comandos assumem \nque a nomeclatura foi seguida ao documento de instala\u00e7\u00e3o.\n\n\n1. Atualiza\u00e7\u00e3o da API\n\n\nPara atualizar o componente \nzup-api\n basta executar os seguintes comandos como \nroot\n nos servidores hospedando o servi\u00e7o:\n\n\ndocker pull institutotim/zup-api:$(cat /opt/zup/config/version)\ndocker run -it \\\n    --link redis:redis --link postgres:postgres \\\n    --env-file=/opt/zup/config/api.env \\\n    institutotim/zup-api bundle exec rake db:migrate \n supervisorctl restart zup-api\n\n\n\n\nO \u00faltimo comando executa as migra\u00e7\u00f5es de banco de dados e reinicia o componente. Na maioria dos casos este comando deve \nproduzir produzir nenhuma ou poucas linhas de sa\u00edda.\n\n\n2. Atualiza\u00e7\u00e3o dos frontends Web\n\n\nPara atualizar o componente \nzup-web\n basta executar os seguintes comandos como \nroot\n nos servidores hospedando o servi\u00e7o:\n\n\ndocker pull institutotim/zup-web:$(cat /opt/zup/config/version)\nsupervisorctl restart zup-web\n\n\n\n\n3. Atualiza\u00e7\u00e3o do PostgreSQL\n\n\nPara atualizar o banco de dados basta executar os seguintes comandos como \nroot\n nos servidores hospedando o servi\u00e7o:\n\n\ndocker pull ntxcode/postgresql:9.4\nsupervisorctl restart postgres\n\n\n\n\n4. Atualiza\u00e7\u00e3o do Redis\n\n\nPara atualizar o servi\u00e7o de cache basta executar os seguintes comandos como \nroot\n nos servidores hospedando o servi\u00e7o:\n\n\ndocker pull redis:2.8\nsupervisorctl restart redis", 
            "title": "Atualiza\u00e7\u00e3o"
        }, 
        {
            "location": "/updating_docker/#atualizacao-dos-componentes-via-docker", 
            "text": "Atualmente o instala\u00e7\u00e3o do ZUP nos servidores \u00e9 composta de dois componentes ( zup-api  e  zup-web ) e dois softwares \nauxiliar,  PostgreSQL  e  redis , usados como SGDB e cache em mem\u00f3ria respectivamente.\nEstes componentes se traduzem em 4 imagens p\u00fablicas hospedadas no Docker Hub sob os IDs  institutotim/zup-api ,  institutotim/zup-web ,  ntxcode/postgresql  e  redis . As imagens do  postgresql  e do  redis  possuem baixa frequencia\nde atualiza\u00e7\u00e3o, visto que elas s\u00f3 ocorrem em caso de atualiza\u00e7\u00f5es de seguran\u00e7a ou quando uma nova funcionalidade \u00e9 \nrequerida destes componentes. J\u00e1 as imagens da API e dos frontends (web) normalmente s\u00e3o atualizadas em conjunto. \nEsta p\u00e1gina detalha as opera\u00e7\u00f5es necess\u00e1rias para realizar as atualiza\u00e7\u00f5es destes componentes. Estes comandos assumem \nque a nomeclatura foi seguida ao documento de instala\u00e7\u00e3o.", 
            "title": "Atualiza\u00e7\u00e3o dos componentes via Docker"
        }, 
        {
            "location": "/updating_docker/#1-atualizacao-da-api", 
            "text": "Para atualizar o componente  zup-api  basta executar os seguintes comandos como  root  nos servidores hospedando o servi\u00e7o:  docker pull institutotim/zup-api:$(cat /opt/zup/config/version)\ndocker run -it \\\n    --link redis:redis --link postgres:postgres \\\n    --env-file=/opt/zup/config/api.env \\\n    institutotim/zup-api bundle exec rake db:migrate   supervisorctl restart zup-api  O \u00faltimo comando executa as migra\u00e7\u00f5es de banco de dados e reinicia o componente. Na maioria dos casos este comando deve \nproduzir produzir nenhuma ou poucas linhas de sa\u00edda.", 
            "title": "1. Atualiza\u00e7\u00e3o da API"
        }, 
        {
            "location": "/updating_docker/#2-atualizacao-dos-frontends-web", 
            "text": "Para atualizar o componente  zup-web  basta executar os seguintes comandos como  root  nos servidores hospedando o servi\u00e7o:  docker pull institutotim/zup-web:$(cat /opt/zup/config/version)\nsupervisorctl restart zup-web", 
            "title": "2. Atualiza\u00e7\u00e3o dos frontends Web"
        }, 
        {
            "location": "/updating_docker/#3-atualizacao-do-postgresql", 
            "text": "Para atualizar o banco de dados basta executar os seguintes comandos como  root  nos servidores hospedando o servi\u00e7o:  docker pull ntxcode/postgresql:9.4\nsupervisorctl restart postgres", 
            "title": "3. Atualiza\u00e7\u00e3o do PostgreSQL"
        }, 
        {
            "location": "/updating_docker/#4-atualizacao-do-redis", 
            "text": "Para atualizar o servi\u00e7o de cache basta executar os seguintes comandos como  root  nos servidores hospedando o servi\u00e7o:  docker pull redis:2.8\nsupervisorctl restart redis", 
            "title": "4. Atualiza\u00e7\u00e3o do Redis"
        }, 
        {
            "location": "/api_configuration/", 
            "text": "Configura\u00e7\u00e3o da API\n\n\nEste documento apresenta instru\u00e7\u00f5es para realizar mudan\u00e7as na configura\u00e7\u00e3o da API do ZUP. Uma lista exaustiva de todos os par\u00e2metros configur\u00e1veis pode ser encontrada aqui.\n\n\nApenas na primeira configura\u00e7\u00e3o: copie o arquivo de exemplo\n\n\nDentro da \u00e1rvore de arquivos no reposit\u00f3rio \u00e9 poss\u00edvel encontrar um arquivo chamado \nsample.env\n. Este arquivo lista todos os par\u00e2metros configur\u00e1veis na aplica\u00e7\u00e3o e serve como ponto de partida para configurar o sistema. Antes que voc\u00ea inicie a API \u00e9 necess\u00e1rio realizar uma c\u00f3pia deste arquivo para o destino efetivo \n.env.production\n.\n\n\ncd /opt/zup-api\ncp sample.env .env.production\n\n\n\nAs configura\u00e7\u00f5es encontradas neste arquivo s\u00e3o lidas pela API durante o processo de inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o, por esta raz\u00e3o toda vez que uma altera\u00e7\u00e3o for realizada \u00e9 necess\u00e1rio reiniciar os processos do ZUP:\n\n\nsudo supervisorctl restart all\n\n\n\nOp\u00e7\u00f5es dispon\u00edveis\n\n\nEmail\n\n\nSENDGRID_USER=\nSENDGRID_PASS=\n\n\n\nAWS\n\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_IMAGE_BUCKET=\n\n\n\nTwitter\n\n\nTWITTER_CONSUMER_KEY=\nTWITTER_CONSUMER_SECRET=\n\n\n\nFacebook\n\n\nFACEBOOK_APP_ID=\nFACEBOOK_APP_SECRET=\n\n\n\nGoogle\n\n\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\n\n\n\nPush notification\n\n\nAPNS_PEM_PATH=\nAPNS_PEM_PASS=\n\n\n\nRedis configuration\n\n\nREDIS_URL=\n\n\n\nAPI domain\n\n\nAPI_DOMAIN=\n\n\n\nWeb Application domain\n\n\nWEB_DOMAIN=\n\n\n\nRails\n\n\nASSET_HOST_URL=\n\n\n\nNew relic\n\n\nNEW_RELIC_LICENSE_KEY=\nNEW_RELIC_APP_NAME=\nNEW_RELIC_MONITOR_MODE=\nNEW_RELIC_DEVELOPER_MODE=\nNEW_RELIC_LOG_LEVEL=", 
            "title": "Configura\u00e7\u00e3o da API"
        }, 
        {
            "location": "/api_configuration/#configuracao-da-api", 
            "text": "Este documento apresenta instru\u00e7\u00f5es para realizar mudan\u00e7as na configura\u00e7\u00e3o da API do ZUP. Uma lista exaustiva de todos os par\u00e2metros configur\u00e1veis pode ser encontrada aqui.", 
            "title": "Configura\u00e7\u00e3o da API"
        }, 
        {
            "location": "/api_configuration/#apenas-na-primeira-configuracao-copie-o-arquivo-de-exemplo", 
            "text": "Dentro da \u00e1rvore de arquivos no reposit\u00f3rio \u00e9 poss\u00edvel encontrar um arquivo chamado  sample.env . Este arquivo lista todos os par\u00e2metros configur\u00e1veis na aplica\u00e7\u00e3o e serve como ponto de partida para configurar o sistema. Antes que voc\u00ea inicie a API \u00e9 necess\u00e1rio realizar uma c\u00f3pia deste arquivo para o destino efetivo  .env.production .  cd /opt/zup-api\ncp sample.env .env.production  As configura\u00e7\u00f5es encontradas neste arquivo s\u00e3o lidas pela API durante o processo de inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o, por esta raz\u00e3o toda vez que uma altera\u00e7\u00e3o for realizada \u00e9 necess\u00e1rio reiniciar os processos do ZUP:  sudo supervisorctl restart all", 
            "title": "Apenas na primeira configura\u00e7\u00e3o: copie o arquivo de exemplo"
        }, 
        {
            "location": "/api_configuration/#opcoes-disponiveis", 
            "text": "Email  SENDGRID_USER=\nSENDGRID_PASS=  AWS  AWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_IMAGE_BUCKET=  Twitter  TWITTER_CONSUMER_KEY=\nTWITTER_CONSUMER_SECRET=  Facebook  FACEBOOK_APP_ID=\nFACEBOOK_APP_SECRET=  Google  GOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=  Push notification  APNS_PEM_PATH=\nAPNS_PEM_PASS=  Redis configuration  REDIS_URL=  API domain  API_DOMAIN=  Web Application domain  WEB_DOMAIN=  Rails  ASSET_HOST_URL=  New relic  NEW_RELIC_LICENSE_KEY=\nNEW_RELIC_APP_NAME=\nNEW_RELIC_MONITOR_MODE=\nNEW_RELIC_DEVELOPER_MODE=\nNEW_RELIC_LOG_LEVEL=", 
            "title": "Op\u00e7\u00f5es dispon\u00edveis"
        }, 
        {
            "location": "/web_configuration/", 
            "text": "", 
            "title": "Configura\u00e7\u00e3o dos aplicativos Web"
        }
    ]
}